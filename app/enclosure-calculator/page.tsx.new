"use client";
import LayoutContainer from "@/components/LayoutContainer";
import React, { useState, useEffect, useCallback } from "react";

export default function EnclosureCalculator() {
	const [dimensions, setDimensions] = useState<Dimensions>({
		length: 1,
		width: 1,
		height: 1,
	});
	const [doorConfig, setDoorConfig] = useState<DoorConfig>({});
	const [results, setResults] = useState<Results>({});

	const handleDimensionChange = (e: React.ChangeEvent<HTMLInputElement>) => {
		setDimensions({
			...dimensions,
			[e.target.name]: parseFloat(e.target.value),
		});
	};

	const handleDoorSelection = (e: React.ChangeEvent<HTMLInputElement>) => {
		setDoorConfig({
			...doorConfig,
			[e.target.name]: e.target.checked,
		});
	};

	/**
	 * Calculate the required materials based on dimensions and door configuration
	 * This function sets the results state with the calculated materials
	 */
	const calculateMaterials = useCallback(() => {
		const { length, width, height } = dimensions;
		const extrusions = calculateExtrusions(length, width, height);
		// const doors = calculateDoors(doorConfig); // Uncomment when logic is implemented

		setResults({ extrusions }); // , doors: doors
	}, [dimensions, doorConfig]);

	useEffect(() => {
		calculateMaterials();
	}, [dimensions, doorConfig, calculateMaterials]);

	const calculateExtrusions = (
		length: number,
		width: number,
		height: number
	) => {
		const frameLength2040 = (length - 0.04) * 2;
		const frameWidth2040 = (width - 0.04) * 2;
		const totalVerticalSupports2020 = height * 4;

		return {
			frame2040: frameLength2040 + frameWidth2040,
			vertical2020: totalVerticalSupports2020,
		};
	};

	// Define calculateDoors function when ready

	return (
		<LayoutContainer>
			<div>
				<input
					type="number"
					name="length"
					value={dimensions.length}
					onChange={handleDimensionChange}
					placeholder="Length (m)"
				/>
				<input
					type="number"
					name="width"
					value={dimensions.width}
					onChange={handleDimensionChange}
					placeholder="Width (m)"
				/>
				<input
					type="number"
					name="height"
					value={dimensions.height}
					onChange={handleDimensionChange}
					placeholder="Height (m)"
				/>

				<div>
					<input
						type="checkbox"
						name="frontDoor"
						checked={!!doorConfig.frontDoor}
						onChange={handleDoorSelection}
					/>
					<label>Front Door</label>
				</div>

				<div>
					<input
						type="checkbox"
						name="backDoor"
						checked={!!doorConfig.backDoor}
						onChange={handleDoorSelection}
					/>
					<label>Back Door</label>
				</div>

				{results.extrusions && (
					<div>
						<p>
							2040 Extrusion Required: {results.extrusions.frame2040.toFixed(2)} meters
						</p>
						<p>
							2020 Extrusion Required: {results.extrusions.vertical2020.toFixed(2)} meters
						</p>
					</div>
				)}
			</div>
		</LayoutContainer>
	);
}

interface Dimensions {
	length: number;
	width: number;
	height: number;
}

interface DoorConfig {
	frontDoor?: boolean;
	backDoor?: boolean;
}

interface Results {
	extrusions?: {
		frame2040: number;
		vertical2020: number;
	};
}
